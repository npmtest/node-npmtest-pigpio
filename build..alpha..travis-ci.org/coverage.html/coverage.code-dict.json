{"/home/travis/build/npmtest/node-npmtest-pigpio/test.js":"/* istanbul instrument in package npmtest_pigpio */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-pigpio/lib.npmtest_pigpio.js":"/* istanbul instrument in package npmtest_pigpio */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_pigpio = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_pigpio = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-pigpio/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-pigpio && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_pigpio */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_pigpio\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_pigpio.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_pigpio.rollup.js'] =\n            local.assetsDict['/assets.npmtest_pigpio.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_pigpio.__dirname + '/lib.npmtest_pigpio.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-pigpio/node_modules/pigpio/pigpio.js":"'use strict';\n\nvar EventEmitter = require('events').EventEmitter,\n  fs = require('fs'),\n  pigpio = require('bindings')('pigpio.node'),\n  util = require('util'),\n  initialized = false;\n\nfunction initializePigpio() {\n  if (!initialized) {\n    pigpio.gpioInitialise();\n    initialized = true;\n  }\n}\n\n/* ------------------------------------------------------------------------ */\n/* Gpio                                                                     */\n/* ------------------------------------------------------------------------ */\n\nfunction Gpio(gpio, options) {\n  if (!(this instanceof Gpio)) {\n    return new Gpio(gpio, options);\n  }\n\n  initializePigpio();\n\n  options = options || {};\n\n  this.gpio = +gpio;\n\n  if (typeof options.mode === 'number') {\n    this.mode(options.mode);\n  }\n\n  if (typeof options.pullUpDown === 'number') {\n    this.pullUpDown(options.pullUpDown);\n  }\n\n  if (typeof options.edge === 'number') {\n    this.enableInterrupt(options.edge,\n      typeof options.timeout === 'number' ? options.timeout : 0\n    );\n  }\n\n  if (typeof options.alert === \"boolean\" && options.alert) {\n    this.enableAlert();\n  }\n\n  EventEmitter.call(this);\n}\n\nutil.inherits(Gpio, EventEmitter);\nmodule.exports.Gpio = Gpio;\n\nGpio.prototype.mode = function (mode) {\n  // What happens if the mode is INPUT, there is an ISR, and the mode is\n  // changed to OUTPUT (or anything else for that matter)?\n  pigpio.gpioSetMode(this.gpio, +mode);\n  return this;\n};\n\nGpio.prototype.getMode = function () {\n  return pigpio.gpioGetMode(this.gpio);\n};\n\nGpio.prototype.pullUpDown = function (pud) {\n  pigpio.gpioSetPullUpDown(this.gpio, +pud);\n  return this;\n};\n\nGpio.prototype.digitalRead = function () {\n  return pigpio.gpioRead(this.gpio);\n};\n\nGpio.prototype.digitalWrite = function (level) {\n  pigpio.gpioWrite(this.gpio, +level);\n  return this;\n};\n\nGpio.prototype.trigger = function (pulseLen, level) {\n  pigpio.gpioTrigger(this.gpio, +pulseLen, +level);\n  return this;\n};\n\nGpio.prototype.pwmWrite = function (dutyCycle) {\n  pigpio.gpioPWM(this.gpio, +dutyCycle);\n  return this;\n};\nGpio.prototype.analogWrite = Gpio.prototype.pwmWrite;\n\nGpio.prototype.hardwarePwmWrite = function (frequency, dutyCycle) {\n  pigpio.gpioHardwarePWM(this.gpio, +frequency, +dutyCycle);\n  return this;\n};\n\nGpio.prototype.getPwmDutyCycle = function () {\n  return pigpio.gpioGetPWMdutycycle(this.gpio);\n};\n\nGpio.prototype.pwmRange = function (range) {\n  pigpio.gpioSetPWMrange(this.gpio, +range);\n  return this;\n};\n\nGpio.prototype.getPwmRange = function () {\n  return pigpio.gpioGetPWMrange(this.gpio);\n};\n\nGpio.prototype.getPwmRealRange = function () {\n  return pigpio.gpioGetPWMrealRange(this.gpio);\n};\n\nGpio.prototype.pwmFrequency = function (frequency) {\n  pigpio.gpioSetPWMfrequency(this.gpio, +frequency);\n  return this;\n};\n\nGpio.prototype.getPwmFrequency = function () {\n  return pigpio.gpioGetPWMfrequency(this.gpio);\n};\n\nGpio.prototype.servoWrite = function (pulseWidth) {\n  pigpio.gpioServo(this.gpio, +pulseWidth);\n  return this;\n};\n\nGpio.prototype.getServoPulseWidth = function () {\n  return pigpio.gpioGetServoPulsewidth(this.gpio);\n};\n\nGpio.prototype.enableInterrupt = function (edge, timeout) {\n  var handler = function (gpio, level, tick) {\n    this.emit('interrupt', level);\n  }.bind(this);\n\n  timeout = timeout || 0;\n  pigpio.gpioSetISRFunc(this.gpio, +edge, +timeout, handler);\n  return this;\n};\n\nGpio.prototype.disableInterrupt = function () {\n  pigpio.gpioSetISRFunc(this.gpio, Gpio.EITHER_EDGE, 0);\n  return this;\n};\n\nGpio.prototype.enableAlert = function () {\n  var handler = function (gpio, level, tick) {\n    this.emit('alert', level, tick);\n  }.bind(this);\n\n  pigpio.gpioSetAlertFunc(this.gpio, handler);\n  return this;\n};\n\nGpio.prototype.disableAlert = function () {\n  pigpio.gpioSetAlertFunc(this.gpio);\n  return this;\n};\n\n/* mode */\nGpio.INPUT = 0; // PI_INPUT\nGpio.OUTPUT = 1; //PI_OUTPUT;\nGpio.ALT0 = 4; // PI_ALT0;\nGpio.ALT1 = 5; // PI_ALT1;\nGpio.ALT2 = 6; // PI_ALT2;\nGpio.ALT3 = 7; // PI_ALT3;\nGpio.ALT4 = 3; // PI_ALT4;\nGpio.ALT5 = 2; // PI_ALT5;\n\n/* pud */\nGpio.PUD_OFF = 0; // PI_PUD_OFF;\nGpio.PUD_DOWN = 1; // PI_PUD_DOWN;\nGpio.PUD_UP = 2; // PI_PUD_UP;\n\n/* isr */\nGpio.RISING_EDGE = 0; // RISING_EDGE;\nGpio.FALLING_EDGE = 1; // FALLING_EDGE;\nGpio.EITHER_EDGE = 2; // EITHER_EDGE;\n\n/* timeout */\nGpio.TIMEOUT = 2; // PI_TIMEOUT;\n\n/* gpio numbers */\nGpio.MIN_GPIO = 0; // PI_MIN_GPIO;\nGpio.MAX_GPIO = 53; // PI_MAX_GPIO;\nGpio.MAX_USER_GPIO = 31; // PI_MAX_USER_GPIO;\n\n/* ------------------------------------------------------------------------ */\n/* GpioBank                                                                 */\n/* ------------------------------------------------------------------------ */\n\nfunction GpioBank(bank) {\n  if (!(this instanceof GpioBank)) {\n    return new GpioBank(bank);\n  }\n\n  initializePigpio();\n\n  this.bankNo = +bank || GpioBank.BANK1;\n}\n\nmodule.exports.GpioBank = GpioBank;\n\nGpioBank.prototype.read = function () {\n  if (this.bankNo === GpioBank.BANK1) {\n    return pigpio.GpioReadBits_0_31();\n  } else if (this.bankNo === GpioBank.BANK2) {\n    return pigpio.GpioReadBits_32_53();\n  }\n};\n\nGpioBank.prototype.set = function (bits) {\n  if (this.bankNo === GpioBank.BANK1) {\n    pigpio.GpioWriteBitsSet_0_31(+bits);\n  } else if (this.bankNo === GpioBank.BANK2) {\n    pigpio.GpioWriteBitsSet_32_53(+bits);\n  }\n\n  return this;\n};\n\nGpioBank.prototype.clear = function (bits) {\n  if (this.bankNo === GpioBank.BANK1) {\n    pigpio.GpioWriteBitsClear_0_31(+bits);\n  } else if (this.bankNo === GpioBank.BANK2) {\n    pigpio.GpioWriteBitsClear_32_53(+bits);\n  }\n\n  return this;\n};\n\nGpioBank.prototype.bank = function () {\n  return this.bankNo;\n};\n\nGpioBank.BANK1 = 1;\nGpioBank.BANK2 = 2;\n\n/* ------------------------------------------------------------------------ */\n/* Notifier                                                                 */\n/* ------------------------------------------------------------------------ */\n\nvar NOTIFICATION_PIPE_PATH_PREFIX = '/dev/pigpio';\n\nfunction Notifier(options) {\n  if (!(this instanceof Notifier)) {\n    return new Notifier(options);\n  }\n\n  initializePigpio();\n\n  options = options || {};\n\n  this.handle = pigpio.gpioNotifyOpenWithSize(1048576);\n\n  // set highWaterMark to a multiple of NOTIFICATION_LENGTH to avoid 'data'\n  // events being emitted with buffers containing partial notifications.\n  this.notificationStream =\n    fs.createReadStream(NOTIFICATION_PIPE_PATH_PREFIX + this.handle, {\n      highWaterMark: Notifier.NOTIFICATION_LENGTH * 5000\n    });\n\n  if (typeof options.bits === 'number') {\n    this.start(options.bits);\n  }\n}\n\nmodule.exports.Notifier = Notifier;\n\nNotifier.prototype.start = function (bits) {\n  pigpio.gpioNotifyBegin(this.handle, +bits);\n  return this;\n};\n\nNotifier.prototype.stop = function () {\n  pigpio.gpioNotifyPause(this.handle);\n  return this;\n};\n\nNotifier.prototype.close = function () {\n  pigpio.gpioNotifyClose(this.handle);\n};\n\nNotifier.prototype.stream = function () {\n  return this.notificationStream;\n};\n\nNotifier.NOTIFICATION_LENGTH = 12;\nNotifier.PI_NTFY_FLAGS_ALIVE = 1 << 6;\n\n/* ------------------------------------------------------------------------ */\n/* Configuration                                                            */\n/* ------------------------------------------------------------------------ */\n\nmodule.exports.hardwareRevision = function () {\n  return pigpio.gpioHardwareRevision();\n};\n\nmodule.exports.initialize = function () {\n  initializePigpio();\n};\n\nmodule.exports.terminate = function () {\n  pigpio.gpioTerminate();\n};\n\nmodule.exports.configureClock = function (microseconds, peripheral) {\n  pigpio.gpioCfgClock(+microseconds, +peripheral);\n  initializePigpio();\n};\n\nmodule.exports.CLOCK_PWM = 0; // PI_CLOCK_PWM;\nmodule.exports.CLOCK_PCM = 1; // PI_CLOCK_PCM;\n\n"}